[1] JDBC(Java DataBase Connectivity)
    - 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API
    - 대표 인터페이스
        1. Connection
        2. PreparedStatement
        3. ResultSet

[2] 마이바티스(MyBatis)
    - 자바에서 데이터베이스와 상호작용할 수 있도록 매우 유연한 퍼시스턴스 프레임워크 제공한다.
    - 특징
        1. SQL 매핑 : XML 파일에 SQL 작성해서 자바 객체와 매핑할 수 있다.
        2. 자동 매핑 : SQL 쿼리의 결과를 자바 객체로 자동으로 매핑할 수 있다.
        3. 유연성 : SQL 직접 작성하고 제어하고 복잡한 쿼리나 기능을 사용 가능하다. vs JPA
        4. 스프링 통합 : 스프링 프레임워크에서 지원한다.
    (1) 디펜더시(그레이들)설치
        1. implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    (2) application.properties(스프링프레임워크가 스프링 실행 시 읽어들이는 실행파일)
        resources / application.properties
        1. JDBC DB URL : 연결할 데이터베이스 이름의 URL
            - spring.datasource.url = jdbc:mysql://localhost:3306/DB명
        2. JDBC DB URL USERNAME : 연결할 데이터베이스의 계정명
            - spring.datasource.username=root
        3. JDBC DB URL USERPASSWORD : 연결할 데이터베이스의 비밀번호 # =앞뒤로 띄어쓰기 주의(패스워드에포함)
            - spring.datasource.password=1234
        4. myBatis xml path : 마이바티스의 xml 파일의 경로
            - mybatis.mapper-locations=classpath:mybatis/mappers/*.xml
            * resources/(mybatis)폴더명/(mappers)폴더명/*xml

    (4) 인터페이스 작성
        @Mapper
        public interface 인터페이스명{
            // 추상메소드
            반환타입 메소드명();
        }

    (3) XML작성   : 여러개 만들 수 있음 인터페이스마다 독립성을 주는게 좋음
        1. XML 파일 생성
            <?xml version="1.0" encoding="UTF-8" ?>
            <!DOCTYPE mapper
                    PUBLIC "-//mybatis.orf//DTD Mapper 3.0//EN"
                    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

        2. 인터페이스(DAO) 매핑하는 XML 코드 작성
            2-1 : 인터페이스 연동
            <mapper namespace="매핑할인터페이스경로">
                <DML> </DML>
            </mapper>
            2-2 : 연동한 인터페이스에 추상메소드 매핑
            <DML id="매핑할추상메소드" parameterType="매개변수" resultType="반환타입">
                sql 구문
            </DML>
                * parameterType , resultType : 일반적으로 1개의 타입만 가능하다. 다양한 타입 : Map , Dto

            * 각 DML 제공
            - insert * 기본 반환타입 : int(레코드 등록개수)
                <insert>
                    insert문
                </insert>
            - select
                <select>
                    select문
                </select>
            - update * 기본 반환타입 : int(레코드 수정개수)
                <update>
                    update문
                </update>
            - delete * 기본 반환타입 : int(레코드 삭제개수)
                <delete>
                    delete문
                </delete>


