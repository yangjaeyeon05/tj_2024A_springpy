[0] HTTP 프로토콜 : 이동 문자 전송 규약
    클라이언트                       서버
        -------- request --------->
        <------- response ---------
    * HTTP 기반의 통신은 요청 있을경우에만 응답이 가능하다. 무상태( 상태유지 안함 )

[1] 웹소켓 websocket
    1. 정의 : ws 프로토콜을 기반으로 클라이언트 와 서버 사이에 *지속적인 양방향* 연결
    2. 지속적인 양방향 연결 ( 상태유지 함 )
        - 소켓 : 통신의 종착점( 엔드포인트 , 통신 주고 받을때의 도착 지점 )
        - 클라이언트 소켓이 서버 소켓으로 부터 연결 요청
    3. 사용처 : 실시간통신 , 채팅 , 알림 , 보안 등등
        - 클라이언트가 요청이 없어도 응답을 받을수 있다. [ http 차이점 ]
    4. 소켓 통신 구조

        클라이언트소켓                                 서버소켓
        1. clientClient( )                          1. serverSocket( ) ip:port
                                                    2. bind() 바인딩 : 서버소켓 등록
        3. connect()  --------- 연결 요청 ------>    4. accept() 클라이언트 연결 요청 수용
        =========================================================================
        * 클라이언트소켓 정보가 서버소켓에 등록되어 서버소켓은 클라이언트소켓에 대해 알고 있는 상태 ( 상태유지 )
        5. write() ----------------------------->   6. read()
        통신 보내기                                  통신 받기
        =========================================================================
        5. read() <-----------------------------   6. write()
        통신 받기                                   통신 보내기
        =========================================================================
        7. close()                                  8. close()  연결 끊기

[2] '서버소켓' 구현 # JAVA(SPRING)
    1. 스프링 에서 '서버소켓' 구현 하는 방법
        1. '웹소켓' 라이브러리 디펜더시 추가 : implementation 'org.springframework.boot:spring-boot-starter-websocket'
        2. 서버소켓 핸들러( 컨틀롤러 ) 설정하기
            1. WebSocketConfig 클래스 만들기
            2. implements WebSocketConfigurer 인터페이스 구현  # springboot 3.x
            3. registerWebSocketHandlers 메소드 구현
                - registry.addHandler( "컨트롤러객체" , "ws서버소켓주소정의" );
            4. 웹서버소켓의 핸들러/컨트롤러 만들기
                - ChatController 클래스 만들기
                - extends TextWebSocketHandler 클래스 상속
                1. 클라이언트가 서버 소켓과 접속 요청이 성공 했을때
                    afterConnectionEstablished 메소드 실행

                2. 클라이언트가 서버 소켓과 접속이 끊겼을때
                    afterConnectionClosed 메소드 실행

[3] '클라이언트소켓' 구현 # JS
    1. JS 에서 '클라이언소켓' 구현 하는 방법
        WebSocket 클래스 이용한 클라이언 소켓 구현
        1. 클라이언트 소켓 생성
        new WebSocket("서버소켓의URL")